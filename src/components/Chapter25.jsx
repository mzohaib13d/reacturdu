import React, { useState } from "react";
import Swal from "sweetalert2";
import "animate.css";

function Chapter25() {
  const [copiedCode, setCopiedCode] = useState("");
  const [activeSystem, setActiveSystem] = useState("basic");

  const copyToClipboard = (code, title) => {
    navigator.clipboard.writeText(code);
    setCopiedCode(title);
    setTimeout(() => setCopiedCode(""), 2000);
  };

  // Demo functions for animated alerts
  const showAnimatedSuccess = () => {
    Swal.fire({
      title: "üéâ ⁄©ÿßŸÖ€åÿßÿ®€å!",
      text: "ÿ¢Ÿæ ⁄©ÿß ⁄©ÿßŸÖ ŸÖ⁄©ŸÖŸÑ €ÅŸà ⁄Ø€åÿß €Å€í€î",
      icon: "success",
      showClass: {
        popup: 'animate__animated animate__zoomIn animate__faster'
      },
      hideClass: {
        popup: 'animate__animated animate__zoomOut animate__faster'
      },
      showConfirmButton: false,
      timer: 2000,
      timerProgressBar: true,
    });
  };

  const showAnimatedError = () => {
    Swal.fire({
      title: "‚ùå ÿÆÿ±ÿßÿ®€å!",
      text: "⁄©⁄Ü⁄æ ÿ∫ŸÑÿ∑€å €ÅŸà ⁄Øÿ¶€å €Å€í€î",
      icon: "error",
      showClass: {
        popup: 'animate__animated animate__shakeX animate__faster'
      },
      hideClass: {
        popup: 'animate__animated animate__fadeOutUp animate__faster'
      },
      confirmButtonText: "Ÿπ⁄æ€å⁄© €Å€í",
    });
  };

  const showAnimatedWarning = () => {
    Swal.fire({
      title: "‚ö† ÿßŸÜÿ™ÿ®ÿß€Å!",
      text: "⁄©€åÿß ÿ¢Ÿæ ŸàÿßŸÇÿπ€å €å€Å ÿπŸÖŸÑ ⁄©ÿ±ŸÜÿß ⁄Üÿß€Åÿ™€í €Å€å⁄∫ÿü",
      icon: "warning",
      showClass: {
        popup: 'animate__animated animate__wobble animate__faster'
      },
      hideClass: {
        popup: 'animate__animated animate__flipOutX animate__faster'
      },
      showCancelButton: true,
      confirmButtonText: "€Åÿß⁄∫",
      cancelButtonText: "ŸÜ€Å€å⁄∫",
    });
  };

  const showAnimatedInfo = () => {
    Swal.fire({
      title: "üí° ŸÖÿπŸÑŸàŸÖÿßÿ™",
      text: "€å€Å ÿß€å⁄© ŸÖÿπŸÑŸàŸÖÿßÿ™€å Ÿæ€åÿ∫ÿßŸÖ €Å€í€î",
      icon: "info",
      showClass: {
        popup: 'animate__animated animate__lightSpeedInLeft animate__faster'
      },
      hideClass: {
        popup: 'animate__animated animate__lightSpeedOutRight animate__faster'
      },
      showConfirmButton: false,
      timer: 2000,
    });
  };

  const showBounceAnimation = () => {
    Swal.fire({
      title: "üèÄ ÿ®ÿßÿ§ŸÜÿ≥ ÿß€åŸÅ€å⁄©Ÿπ!",
      text: "€å€Å ÿ®ÿßÿ§ŸÜÿ≥ ÿßŸÜ€åŸÖ€åÿ¥ŸÜ €Å€í€î",
      icon: "success",
      showClass: {
        popup: 'animate__animated animate__bounceIn animate__faster'
      },
      hideClass: {
        popup: 'animate__animated animate__bounceOut animate__faster'
      },
      showConfirmButton: false,
      timer: 2000,
    });
  };

  const showFlipAnimation = () => {
    Swal.fire({
      title: "üîÑ ŸÅŸÑŸæ ÿß€åŸÅ€å⁄©Ÿπ!",
      text: "€å€Å ŸÅŸÑŸæ ÿßŸÜ€åŸÖ€åÿ¥ŸÜ €Å€í€î",
      icon: "info",
      showClass: {
        popup: 'animate__animated animate__flipInX animate__faster'
      },
      hideClass: {
        popup: 'animate__animated animate__flipOutX animate__faster'
      },
      showConfirmButton: false,
      timer: 2000,
    });
  };

  // Code blocks for Basic Authentication
  const basicCodeBlocks = {
    folderStructure: `üìÅ src/
 ‚îú‚îÄ‚îÄ üìÇ context/
 ‚îÇ     ‚îî‚îÄ‚îÄ AuthContext.jsx
 ‚îú‚îÄ‚îÄ üìÇ pages/
 ‚îÇ     ‚îú‚îÄ‚îÄ Login.jsx
 ‚îÇ     ‚îú‚îÄ‚îÄ Dashboard.jsx
 ‚îÇ     ‚îú‚îÄ‚îÄ Home.jsx
 ‚îú‚îÄ‚îÄ ProtectedRoute.jsx
 ‚îú‚îÄ‚îÄ App.jsx
 ‚îî‚îÄ‚îÄ main.jsx`,

    stepByStep: `üîß Step-by-Step Implementation:

1. AuthContext.jsx ÿ®ŸÜÿßÿ¶€å⁄∫ (Context API)
2. ProtectedRoute.jsx ÿ®ŸÜÿßÿ¶€å⁄∫ (Route Protection)
3. Login.jsx ÿ®ŸÜÿßÿ¶€å⁄∫ (Login Form)
4. Dashboard.jsx ÿ®ŸÜÿßÿ¶€å⁄∫ (Protected Page)
5. Home.jsx ÿ®ŸÜÿßÿ¶€å⁄∫ (Public Page)
6. App.jsx ŸÖ€å⁄∫ ÿ≥ÿ® ⁄©⁄Ü⁄æ connect ⁄©ÿ±€å⁄∫
7. main.jsx ŸÖ€å⁄∫ App ⁄©Ÿà wrap ⁄©ÿ±€å⁄∫`,

    authContext: `// context/AuthContext.jsx
import React, { createContext, useState, useContext, useEffect } from "react";

const AuthContext = createContext();

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);

  useEffect(() => {
    // Check if user is logged in from localStorage
    const savedUser = localStorage.getItem("user");
    if (savedUser) {
      setUser(JSON.parse(savedUser));
    }
  }, []);

  const login = (userData) => {
    setUser(userData);
    localStorage.setItem("user", JSON.stringify(userData));
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem("user");
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  return useContext(AuthContext);
}`,

    protectedRoute: `// ProtectedRoute.jsx
import { useAuth } from "./context/AuthContext";
import { Navigate } from "react-router-dom";

export default function ProtectedRoute({ children }) {
  const { user } = useAuth();

  if (!user) {
    return <Navigate to="/login" replace />;
  }

  return children;
}`,

    loginComponent: `// pages/Login.jsx
import { useState } from "react";
import { useAuth } from "../context/AuthContext";
import { useNavigate } from "react-router-dom";

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();
    
    // Demo login - in real app, verify with backend
    const userData = {
      id: 1,
      name: "John Doe",
      email: email
    };
    
    login(userData);
    navigate("/dashboard");
  };

  return (
    <div className="login-container">
      <h2>üîê Login</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <button type="submit">Login</button>
      </form>
    </div>
  );
}`,

    dashboardComponent: `// pages/Dashboard.jsx
import { useAuth } from "../context/AuthContext";
import { useNavigate } from "react-router-dom";

export default function Dashboard() {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  return (
    <div className="dashboard">
      <h2>üéØ Dashboard</h2>
      <p>Welcome, {user?.name}!</p>
      <p>Email: {user?.email}</p>
      <button onClick={handleLogout}>Logout</button>
    </div>
  );
}`,

    homeComponent: `// pages/Home.jsx
export default function Home() {
  return (
    <div style={{ textAlign: "center", marginTop: "40px" }}>
      <h2>üåü Home Page</h2>
      <p>Welcome to the Laptop Store App!</p>
    </div>
  );
}`,

    appStructure: `// App.jsx
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { AuthProvider } from "./context/AuthContext";
import ProtectedRoute from "./ProtectedRoute";
import Login from "./pages/Login";
import Dashboard from "./pages/Dashboard";
import Home from "./pages/Home";

function App() {
  return (
    <AuthProvider>
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/login" element={<Login />} />
          <Route 
            path="/dashboard" 
            element={
              <ProtectedRoute>
                <Dashboard />
              </ProtectedRoute>
            } 
          />
        </Routes>
      </BrowserRouter>
    </AuthProvider>
  );
}

export default App;`,

    mainJsx: `// main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`
  };

  // Code blocks for Advanced Authentication
  const advancedCodeBlocks = {
    installation: `npm install sweetalert2`,
    animateInstallation: `npm install animate.css`,

    animateImport: `// main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import "animate.css"; // Import animate.css for animations

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`,

    animatedAlertExample: `// Example: Animated Success Alert
Swal.fire({
  title: "üéâ ⁄©ÿßŸÖ€åÿßÿ®€å!",
  text: "ÿ¢Ÿæ ⁄©ÿß ⁄©ÿßŸÖ ŸÖ⁄©ŸÖŸÑ €ÅŸà ⁄Ø€åÿß €Å€í€î",
  icon: "success",
  showClass: {
    popup: 'animate__animated animate__zoomIn animate__faster'
  },
  hideClass: {
    popup: 'animate__animated animate__zoomOut animate__faster'
  },
  showConfirmButton: false,
  timer: 2000,
  timerProgressBar: true,
});`,

    advancedAuthContext: `// context/AuthContext.jsx
import { createContext, useState, useEffect } from "react";

export const AuthContext = createContext();

export default function AuthProvider({ children }) {
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  // ‚úÖ Auto Login check on refresh
  useEffect(() => {
    const savedLogin = localStorage.getItem("isLoggedIn") === "true";
    setIsLoggedIn(savedLogin);
  }, []);

  // ‚úÖ Login Function
  const login = (stayLogged) => {
    setIsLoggedIn(true);
    if (stayLogged) {
      localStorage.setItem("isLoggedIn", "true");
    }
  };

  // üî¥ Logout Function
  const logout = () => {
    setIsLoggedIn(false);
    localStorage.clear();
  };

  return (
    <AuthContext.Provider value={{ isLoggedIn, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
}`,

    advancedLogin: `// pages/Login.jsx
import { useState, useContext } from "react";
import { useNavigate } from "react-router-dom";
import { AuthContext } from "../context/AuthContext";
import Swal from "sweetalert2";

export default function Login() {
  const [name, setName] = useState("");
  const [stayLogged, setStayLogged] = useState(false);
  const { login } = useContext(AuthContext);
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();

    if (name.trim()) {
      login(stayLogged);

      // üéâ Animated Success Alert
      Swal.fire({
        title: \`ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ \${name}!\`,
        text: "ÿ¢Ÿæ ⁄©ÿßŸÖ€åÿßÿ®€å ÿ≥€í ŸÑÿß⁄Ø ÿßŸÜ €ÅŸà ⁄Øÿ¶€í €Å€å⁄∫€î",
        icon: "success",
        showClass: {
          popup: 'animate__animated animate__zoomIn animate__faster'
        },
        hideClass: {
          popup: 'animate__animated animate__zoomOut animate__faster'
        },
        showConfirmButton: false,
        timer: 2000,
        timerProgressBar: true,
      });

      navigate("/dashboard");
    } else {
      // ‚ùå Error Alert
      Swal.fire({
        title: "‚ö† ŸÜÿßŸÖ ÿ∂ÿ±Ÿàÿ±€å €Å€í!",
        text: "ÿ®ÿ±ÿß€Å ⁄©ÿ±ŸÖ ÿßŸæŸÜÿß ŸÜÿßŸÖ ÿØÿ±ÿ¨ ⁄©ÿ±€å⁄∫€î",
        icon: "error",
        showClass: {
          popup: 'animate__animated animate__shakeX animate__faster'
        },
        showConfirmButton: true,
      });
    }
  };

  return (
    <div style={{ textAlign: "center", marginTop: "40px" }}>
      <h2>üîê Login Page</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="ÿßŸæŸÜÿß ŸÜÿßŸÖ ÿØÿ±ÿ¨ ⁄©ÿ±€å⁄∫"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
        <div>
          <label>
            <input
              type="checkbox"
              checked={stayLogged}
              onChange={() => setStayLogged(!stayLogged)}
            />
            Stay Logged In
          </label>
        </div>
        <button type="submit">Login</button>
      </form>
    </div>
  );
}`,

    advancedDashboard: `// pages/Dashboard.jsx
import { useContext } from "react";
import { useNavigate } from "react-router-dom";
import { AuthContext } from "../context/AuthContext";
import Swal from "sweetalert2";

export default function Dashboard() {
  const { logout } = useContext(AuthContext);
  const navigate = useNavigate();

  const handleLogout = () => {
    Swal.fire({
      title: "⁄©€åÿß ÿ¢Ÿæ ŸàÿßŸÇÿπ€å Logout ⁄©ÿ±ŸÜÿß ⁄Üÿß€Åÿ™€í €Å€å⁄∫ÿü",
      text: "Logout €ÅŸàŸÜ€í Ÿæÿ± ÿ™ŸÖÿßŸÖ ŸÖÿ≠ŸÅŸàÿ∏ ⁄à€åŸπÿß ÿÆÿ™ŸÖ €ÅŸà ÿ¨ÿßÿ¶€í ⁄Øÿß€î",
      icon: "warning",
      showClass: {
        popup: 'animate__animated animate__wobble animate__faster'
      },
      showCancelButton: true,
      confirmButtonText: "€Åÿß⁄∫ÿå Logout ⁄©ÿ±€å⁄∫",
      cancelButtonText: "ŸÜ€Å€å⁄∫ÿå ŸàÿßŸæÿ≥ ÿ¨ÿßÿ¶€å⁄∫",
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
    }).then((result) => {
      if (result.isConfirmed) {
        logout();
        navigate("/login");

        // ‚úÖ Animated Success Popup
        Swal.fire({
          title: "Logout ŸÖ⁄©ŸÖŸÑ ‚úÖ",
          text: "ÿ¢Ÿæ ⁄©ÿßŸÖ€åÿßÿ®€å ÿ≥€í logout €ÅŸà ⁄Øÿ¶€í €Å€å⁄∫€î",
          icon: "success",
          showClass: {
            popup: 'animate__animated animate__bounceIn animate__faster'
          },
          timer: 2000,
          showConfirmButton: false,
          timerProgressBar: true,
        });
      }
    });
  };

  return (
    <div style={{ textAlign: "center", marginTop: "40px" }}>
      <h2>üè† Dashboard</h2>
      <p>ÿ¢Ÿæ ŸÑÿß⁄Ø ÿßŸÜ €Å€å⁄∫€î ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ!</p>
      <button onClick={handleLogout}>üö™ Logout</button>
    </div>
  );
}`,

    advancedProtectedRoute: `// ProtectedRoute.jsx
import { useContext } from "react";
import { Navigate } from "react-router-dom";
import { AuthContext } from "./context/AuthContext";

export default function ProtectedRoute({ children }) {
  const { isLoggedIn } = useContext(AuthContext);
  return isLoggedIn ? children : <Navigate to="/login" replace />;
}`,

    advancedHome: `// pages/Home.jsx
export default function Home() {
  return (
    <div style={{ textAlign: "center", marginTop: "40px" }}>
      <h2>üåü Home Page</h2>
      <p>Welcome to the React SweetAlert2 + AutoLogin App!</p>
    </div>
  );
}`,

    advancedApp: `// App.jsx
import { BrowserRouter, Routes, Route } from "react-router-dom";
import Home from "./pages/Home";
import Login from "./pages/Login";
import Dashboard from "./pages/Dashboard";
import ProtectedRoute from "./ProtectedRoute";
import AuthProvider from "./context/AuthContext";

export default function App() {
  return (
    <AuthProvider>
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/login" element={<Login />} />

          {/* üîê Protected Dashboard Route */}
          <Route
            path="/dashboard"
            element={
              <ProtectedRoute>
                <Dashboard />
              </ProtectedRoute>
            }
          />
        </Routes>
      </BrowserRouter>
    </AuthProvider>
  );
}`
  };

  return (
    <div className="chapter-container urdu-text">
      <div className="chapter-header">
        <h1 className="chapter-title2">
          üìö ⁄Ü€åŸæŸπÿ± 25: Authentication & Protected Routes + SweetAlert2
        </h1>
        <p className="chapter-subtitle2">User Login & Route Protection in React with Beautiful Alerts</p>
      </div>

      {/* System Selection */}
      <section className="section-card">
        <h2 className="section-title">üéØ Authentication System Selection</h2>
        <div className="demo-card" style={{ textAlign: "center" }}>
          <div style={{ display: "flex", gap: "20px", justifyContent: "center", flexWrap: "wrap" }}>
            <button
              className={`sidebar-btn ${activeSystem === "basic" ? "active" : ""}`}
              onClick={() => setActiveSystem("basic")}
              style={{ padding: "15px 25px", fontSize: "16px" }}
            >
              üîê Basic Authentication System
            </button>
            <button
              className={`sidebar-btn ${activeSystem === "advanced" ? "active" : ""}`}
              onClick={() => setActiveSystem("advanced")}
              style={{ padding: "15px 25px", fontSize: "16px" }}
            >
              üöÄ Advanced System (SweetAlert2 + Auto Login)
            </button>
          </div>
          <p style={{ marginTop: "15px", color: "#666", fontSize: "16px" }}>
            <strong>ÿßŸàŸæÿ± ŸÖŸàÿ¨ŸàÿØÿ®ŸπŸÜ ÿ≥€í ŸÖŸÜÿ™ÿÆÿ® ⁄©ÿ±€å⁄∫€î </strong>
          </p>
        </div>
      </section>

      {activeSystem === "basic" ? (
        /* Basic Authentication System */
        <>
          {/* Folder Structure Section */}
          <section className="section-card">
            <h2 className="section-title">üóÇ Folder Structure</h2>
            <p className="section-text">
              Ÿæ€ÅŸÑ€í ÿßŸæŸÜ€í project ⁄©€å folder structure ⁄©Ÿà ÿßÿ≥ ÿ∑ÿ±ÿ≠ organize ⁄©ÿ±€å⁄∫:
            </p>

            <div className="code-section">
              <div className="code-header">
                <h3>üìÅ Project Folder Structure</h3>
              </div>
              <pre className="english-code">
                <code>{basicCodeBlocks.folderStructure}</code>
              </pre>
              <div className="code-scroll-notice-parent">
                <div className="code-scroll-notice">Please scroll ‚Üí </div>
                <button
                  className="copy-btn"
                  onClick={() => copyToClipboard(basicCodeBlocks.folderStructure, "Folder Structure")}
                >
                  {copiedCode === "Folder Structure" ? "‚úÖ Copied!" : "üìã Copy Code"}
                </button>
              </div>
            </div>
          </section>

          {/* Step-by-Step Implementation */}
          <section className="section-card">
            <h2 className="section-title">‚öô Step-by-Step Implementation</h2>
            <p className="section-text">
              ŸÜ€å⁄Ü€í ÿØ€å€í ⁄Øÿ¶€í steps ⁄©Ÿà ÿ™ÿ±ÿ™€åÿ® ÿ≥€í follow ⁄©ÿ±€å⁄∫:
            </p>

            <div className="code-section">
              <div className="code-header">
                <h3>üîß Implementation Steps</h3>
              </div>
              <pre className="english-code">
                <code>{basicCodeBlocks.stepByStep}</code>
              </pre>
              <div className="code-scroll-notice-parent">
                <div className="code-scroll-notice">Please scroll ‚Üí </div>
                <button
                  className="copy-btn"
                  onClick={() => copyToClipboard(basicCodeBlocks.stepByStep, "Implementation Steps")}
                >
                  {copiedCode === "Implementation Steps" ? "‚úÖ Copied!" : "üìã Copy Code"}
                </button>
              </div>
            </div>

            {/* Step Cards */}
            <div className="step-card">
              <div className="step-number">1</div>
              <div className="step-content">
                <h3 className="step-title">AuthContext.jsx ÿ®ŸÜÿßÿ¶€å⁄∫</h3>
                <p className="urdu-text">
                  <strong>context</strong> folder ⁄©€í ÿßŸÜÿØÿ± <strong>AuthContext.jsx</strong> ŸÅÿßÿ¶ŸÑ ÿ®ŸÜÿßÿ¶€å⁄∫€î
                  €å€Å ŸÅÿßÿ¶ŸÑ ŸæŸàÿ±€å app ŸÖ€å⁄∫ user state ⁄©Ÿà manage ⁄©ÿ±€í ⁄Ø€å€î
                </p>
                
                <div className="code-section">
                  <div className="code-header">
                    <h3>context/AuthContext.jsx</h3>
                    <button
                      className="copy-btn"
                      onClick={() => copyToClipboard(basicCodeBlocks.authContext, "Auth Context")}
                    >
                      {copiedCode === "Auth Context" ? "‚úÖ Copied!" : "üìã Copy Code"}
                    </button>
                  </div>
                  <pre className="english-code">
                    <code>{basicCodeBlocks.authContext}</code>
                  </pre>
                </div>
              </div>
            </div>

            <div className="step-card">
              <div className="step-number">2</div>
              <div className="step-content">
                <h3 className="step-title">ProtectedRoute.jsx ÿ®ŸÜÿßÿ¶€å⁄∫</h3>
                <p className="urdu-text">
                  root directory ŸÖ€å⁄∫ <strong>ProtectedRoute.jsx</strong> ŸÅÿßÿ¶ŸÑ ÿ®ŸÜÿßÿ¶€å⁄∫€î 
                  €å€Å component check ⁄©ÿ±€í ⁄Øÿß ⁄©€Å user logged in €Å€í €åÿß ŸÜ€Å€å⁄∫€î
                </p>
                
                <div className="code-section">
                  <div className="code-header">
                    <h3>ProtectedRoute.jsx</h3>
                    <button
                      className="copy-btn"
                      onClick={() => copyToClipboard(basicCodeBlocks.protectedRoute, "Protected Route")}
                    >
                      {copiedCode === "Protected Route" ? "‚úÖ Copied!" : "üìã Copy Code"}
                    </button>
                  </div>
                  <pre className="english-code">
                    <code>{basicCodeBlocks.protectedRoute}</code>
                  </pre>
                </div>
              </div>
            </div>

            <div className="step-card">
              <div className="step-number">3</div>
              <div className="step-content">
                <h3 className="step-title">Login.jsx ÿ®ŸÜÿßÿ¶€å⁄∫</h3>
                <p className="urdu-text">
                  <strong>pages</strong> folder ⁄©€í ÿßŸÜÿØÿ± <strong>Login.jsx</strong> ŸÅÿßÿ¶ŸÑ ÿ®ŸÜÿßÿ¶€å⁄∫€î 
                  €å€Å user ⁄©€í login form ⁄©Ÿà handle ⁄©ÿ±€í ⁄Ø€å€î
                </p>
                
                <div className="code-section">
                  <div className="code-header">
                    <h3>pages/Login.jsx</h3>
                    <button
                      className="copy-btn"
                      onClick={() => copyToClipboard(basicCodeBlocks.loginComponent, "Login Component")}
                    >
                      {copiedCode === "Login Component" ? "‚úÖ Copied!" : "üìã Copy Code"}
                    </button>
                  </div>
                  <pre className="english-code">
                    <code>{basicCodeBlocks.loginComponent}</code>
                  </pre>
                </div>
              </div>
            </div>

            <div className="step-card">
              <div className="step-number">4</div>
              <div className="step-content">
                <h3 className="step-title">Dashboard.jsx ÿ®ŸÜÿßÿ¶€å⁄∫</h3>
                <p className="urdu-text">
                  <strong>pages</strong> folder ⁄©€í ÿßŸÜÿØÿ± <strong>Dashboard.jsx</strong> ŸÅÿßÿ¶ŸÑ ÿ®ŸÜÿßÿ¶€å⁄∫€î 
                  €å€Å ÿß€å⁄© protected page €ÅŸà⁄Ø€å ÿ¨Ÿà ÿµÿ±ŸÅ logged in users ⁄©Ÿà ÿØ⁄©⁄æÿßÿ¶€å ÿØ€í ⁄Ø€å€î
                </p>
                
                <div className="code-section">
                  <div className="code-header">
                    <h3>pages/Dashboard.jsx</h3>
                    <button
                      className="copy-btn"
                      onClick={() => copyToClipboard(basicCodeBlocks.dashboardComponent, "Dashboard Component")}
                    >
                      {copiedCode === "Dashboard Component" ? "‚úÖ Copied!" : "üìã Copy Code"}
                    </button>
                  </div>
                  <pre className="english-code">
                    <code>{basicCodeBlocks.dashboardComponent}</code>
                  </pre>
                </div>
              </div>
            </div>

            <div className="step-card">
              <div className="step-number">5</div>
              <div className="step-content">
                <h3 className="step-title">Home.jsx ÿ®ŸÜÿßÿ¶€å⁄∫</h3>
                <p className="urdu-text">
                  <strong>pages</strong> folder ⁄©€í ÿßŸÜÿØÿ± <strong>Home.jsx</strong> ŸÅÿßÿ¶ŸÑ ÿ®ŸÜÿßÿ¶€å⁄∫€î 
                  €å€Å ÿß€å⁄© public page €ÅŸà⁄Ø€å ÿ¨Ÿà €Åÿ± user ⁄©Ÿà ÿØ⁄©⁄æÿßÿ¶€å ÿØ€í ⁄Ø€å€î
                </p>
                
                <div className="code-section">
                  <div className="code-header">
                    <h3>pages/Home.jsx</h3>
                    <button
                      className="copy-btn"
                      onClick={() => copyToClipboard(basicCodeBlocks.homeComponent, "Home Component")}
                    >
                      {copiedCode === "Home Component" ? "‚úÖ Copied!" : "üìã Copy Code"}
                    </button>
                  </div>
                  <pre className="english-code">
                    <code>{basicCodeBlocks.homeComponent}</code>
                  </pre>
                </div>
              </div>
            </div>

            <div className="step-card">
              <div className="step-number">6</div>
              <div className="step-content">
                <h3 className="step-title">App.jsx ŸÖ€å⁄∫ Routes Setup ⁄©ÿ±€å⁄∫</h3>
                <p className="urdu-text">
                  <strong>App.jsx</strong> ŸÅÿßÿ¶ŸÑ ŸÖ€å⁄∫ ÿ™ŸÖÿßŸÖ components ⁄©Ÿà connect ⁄©ÿ±€å⁄∫ ÿßŸàÿ± routes define ⁄©ÿ±€å⁄∫€î
                </p>
                
                <div className="code-section">
                  <div className="code-header">
                    <h3>App.jsx</h3>
                    <button
                      className="copy-btn"
                      onClick={() => copyToClipboard(basicCodeBlocks.appStructure, "App Structure")}
                    >
                      {copiedCode === "App Structure" ? "‚úÖ Copied!" : "üìã Copy Code"}
                    </button>
                  </div>
                  <pre className="english-code">
                    <code>{basicCodeBlocks.appStructure}</code>
                  </pre>
                </div>
              </div>
            </div>

            <div className="step-card">
              <div className="step-number">7</div>
              <div className="step-content">
                <h3 className="step-title">main.jsx ⁄©Ÿà update ⁄©ÿ±€å⁄∫</h3>
                <p className="urdu-text">
                  <strong>main.jsx</strong> ŸÅÿßÿ¶ŸÑ ⁄©Ÿà check ⁄©ÿ±€å⁄∫ ⁄©€Å Ÿà€Å ÿµÿ≠€åÿ≠ ÿ∑ÿ±€åŸÇ€í ÿ≥€í setup €Å€í€î
                </p>
                
                <div className="code-section">
                  <div className="code-header">
                    <h3>main.jsx</h3>
                    <button
                      className="copy-btn"
                      onClick={() => copyToClipboard(basicCodeBlocks.mainJsx, "Main.jsx")}
                    >
                      {copiedCode === "Main.jsx" ? "‚úÖ Copied!" : "üìã Copy Code"}
                    </button>
                  </div>
                  <pre className="english-code">
                    <code>{basicCodeBlocks.mainJsx}</code>
                  </pre>
                </div>
              </div>
            </div>
          </section>
        </>
      ) : (
        /* Advanced Authentication System */
        <>
          {/* SweetAlert2 Introduction */}
          <section className="section-card">
            <h2 className="section-title">üéâ SweetAlert2 + Auto Login System</h2>
            <p className="section-text">
              ÿßÿ≥ ÿ¨ÿØ€åÿØ system ŸÖ€å⁄∫ €ÅŸÖ SweetAlert2 ⁄©€í ÿÆŸàÿ®ÿµŸàÿ±ÿ™ popups ÿßŸàÿ± Auto Login feature ⁄©Ÿà ÿ¥ÿßŸÖŸÑ ⁄©ÿ±€å⁄∫ ⁄Ø€í€î
            </p>

            <div className="info-box">
              <h4>üåê Official Resource</h4>
              <p><strong>SweetAlert2 Official Website:</strong> üëâ <a href="https://sweetalert2.github.io" target="_blank" rel="noopener noreferrer" style={{color: '#0078ff'}}>https://sweetalert2.github.io</a></p>
            </div>

            <div className="code-section">
              <div className="code-header">
                <h3>üíª Installation Command</h3>
                <button
                  className="copy-btn"
                  onClick={() => copyToClipboard(advancedCodeBlocks.installation, "Installation Command")}
                >
                  {copiedCode === "Installation Command" ? "‚úÖ Copied!" : "üìã Copy Code"}
                </button>
              </div>
              <pre className="english-code">
                <code>{advancedCodeBlocks.installation}</code>
              </pre>
            </div>
          </section>

          {/* Animation Enhancement Section */}
          <section className="section-card">
            <h2 className="section-title">üåà Optional Enhancement ‚Äî Animation Support</h2>
            <p className="section-text">
              ÿß⁄Øÿ± ÿ¢Ÿæ popup ŸÖ€å⁄∫ animation ÿ¥ÿßŸÖŸÑ ⁄©ÿ±ŸÜÿß ⁄Üÿß€Å€å⁄∫ ÿ™Ÿà Animate.css ÿßÿ≥ÿ™ÿπŸÖÿßŸÑ ⁄©ÿ± ÿ≥⁄©ÿ™€í €Å€å⁄∫€î
            </p>

            <div className="code-section">
              <div className="code-header">
                <h3>üì¶ Animate.css Installation</h3>
                <button
                  className="copy-btn"
                  onClick={() => copyToClipboard(advancedCodeBlocks.animateInstallation, "Animate.css Installation")}
                >
                  {copiedCode === "Animate.css Installation" ? "‚úÖ Copied!" : "üìã Copy Code"}
                </button>
              </div>
              <pre className="english-code">
                <code>{advancedCodeBlocks.animateInstallation}</code>
              </pre>
            </div>

            <div className="code-section">
              <div className="code-header">
                <h3>üìù Import in main.jsx</h3>
                <button
                  className="copy-btn"
                  onClick={() => copyToClipboard(advancedCodeBlocks.animateImport, "Animate.css Import")}
                >
                  {copiedCode === "Animate.css Import" ? "‚úÖ Copied!" : "üìã Copy Code"}
                </button>
              </div>
              <pre className="english-code">
                <code>{advancedCodeBlocks.animateImport}</code>
              </pre>
            </div>

            <div className="code-section">
              <div className="code-header">
                <h3>üéûÔ∏è Animated Alert Example</h3>
                <button
                  className="copy-btn"
                  onClick={() => copyToClipboard(advancedCodeBlocks.animatedAlertExample, "Animated Alert Example")}
                >
                  {copiedCode === "Animated Alert Example" ? "‚úÖ Copied!" : "üìã Copy Code"}
                </button>
              </div>
              <pre className="english-code">
                <code>{advancedCodeBlocks.animatedAlertExample}</code>
              </pre>
            </div>

            {/* Live Animation Demonstration */}
            <div className="demo-section">
              <h3>üé¨ Live Animation Demonstration</h3>
              <p className="section-text">
                ŸÜ€å⁄Ü€í ÿØ€å€í ⁄Øÿ¶€í ÿ®ŸπŸÜŸà⁄∫ Ÿæÿ± ⁄©ŸÑ⁄© ⁄©ÿ± ⁄©€í ŸÖÿÆÿ™ŸÑŸÅ animations ÿØ€å⁄©⁄æ€å⁄∫:
              </p>
              
              <div className="demo-card">
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '15px', marginTop: '20px' }}>
                  <button className="interactive-btn" onClick={showAnimatedSuccess}>
                    üéâ ⁄©ÿßŸÖ€åÿßÿ®€å ⁄©ÿß Ÿæ€åÿ∫ÿßŸÖ
                  </button>
                  <button className="interactive-btn" onClick={showAnimatedError}>
                    ‚ùå ÿÆÿ±ÿßÿ®€å ⁄©ÿß Ÿæ€åÿ∫ÿßŸÖ
                  </button>
                  <button className="interactive-btn" onClick={showAnimatedWarning}>
                    ‚ö† ÿßŸÜÿ™ÿ®ÿß€Å ⁄©ÿß Ÿæ€åÿ∫ÿßŸÖ
                  </button>
                  <button className="interactive-btn" onClick={showAnimatedInfo}>
                    üí° ŸÖÿπŸÑŸàŸÖÿßÿ™ ⁄©ÿß Ÿæ€åÿ∫ÿßŸÖ
                  </button>
                  <button className="interactive-btn" onClick={showBounceAnimation}>
                    üèÄ ÿ®ÿßÿ§ŸÜÿ≥ ÿß€åŸÅ€å⁄©Ÿπ
                  </button>
                  <button className="interactive-btn" onClick={showFlipAnimation}>
                    üîÑ ŸÅŸÑŸæ ÿß€åŸÅ€å⁄©Ÿπ
                  </button>
                </div>
                
                <div className="info-box" style={{ marginTop: '20px' }}>
                  <h4>üìö Animation Classes Reference</h4>
                  <p><strong>showClass:</strong> popup ÿ∏ÿß€Åÿ± €ÅŸàŸÜ€í ⁄©ÿß animation</p>
                  <p><strong>hideClass:</strong> popup ÿ∫ÿßÿ¶ÿ® €ÅŸàŸÜ€í ⁄©ÿß animation</p>
                  <p><strong>Popular Animations:</strong> zoomIn, zoomOut, bounceIn, bounceOut, flipInX, flipOutX, shakeX, wobble, lightSpeedInLeft, lightSpeedOutRight</p>
                </div>
              </div>
            </div>
          </section>

          {/* Advanced Implementation Steps */}
          <section className="section-card">
            <h2 className="section-title">üöÄ Advanced Implementation</h2>

            <div className="step-card">
              <div className="step-number">1</div>
              <div className="step-content">
                <h3 className="step-title">Advanced AuthContext.jsx</h3>
                <p className="urdu-text">
                  €å€Å context auto login feature ⁄©€í ÿ≥ÿßÿ™⁄æ €Å€í€î ÿ¨ÿ® user "Stay Logged In" checkbox Ÿæÿ± click ⁄©ÿ±€í ⁄Øÿßÿå
                  ÿ™Ÿà app refresh €ÅŸàŸÜ€í ⁄©€í ÿ®ÿπÿØ ÿ®⁄æ€å Ÿà€Å automatically logged in ÿ±€Å€í ⁄Øÿß€î
                </p>
                
                <div className="code-section">
                  <div className="code-header">
                    <h3>context/AuthContext.jsx (Advanced)</h3>
                    <button
                      className="copy-btn"
                      onClick={() => copyToClipboard(advancedCodeBlocks.advancedAuthContext, "Advanced Auth Context")}
                    >
                      {copiedCode === "Advanced Auth Context" ? "‚úÖ Copied!" : "üìã Copy Code"}
                    </button>
                  </div>
                  <pre className="english-code">
                    <code>{advancedCodeBlocks.advancedAuthContext}</code>
                  </pre>
                </div>
              </div>
            </div>

            <div className="step-card">
              <div className="step-number">2</div>
              <div className="step-content">
                <h3 className="step-title">Advanced Login.jsx with SweetAlert2</h3>
                <p className="urdu-text">
                  €å€Å login component SweetAlert2 ⁄©€í animated alerts ÿßŸàÿ± "Stay Logged In" feature ⁄©€í ÿ≥ÿßÿ™⁄æ €Å€í€î
                </p>
                
                <div className="code-section">
                  <div className="code-header">
                    <h3>pages/Login.jsx (Advanced)</h3>
                    <button
                      className="copy-btn"
                      onClick={() => copyToClipboard(advancedCodeBlocks.advancedLogin, "Advanced Login")}
                    >
                      {copiedCode === "Advanced Login" ? "‚úÖ Copied!" : "üìã Copy Code"}
                    </button>
                  </div>
                  <pre className="english-code">
                    <code>{advancedCodeBlocks.advancedLogin}</code>
                  </pre>
                </div>
              </div>
            </div>

            <div className="step-card">
              <div className="step-number">3</div>
              <div className="step-content">
                <h3 className="step-title">Advanced Dashboard.jsx</h3>
                <p className="urdu-text">
                  €å€Å dashboard component ŸÖ€å⁄∫ logout confirmation ⁄©€í ŸÑ€å€í SweetAlert2 ⁄©ÿß ÿßÿ≥ÿ™ÿπŸÖÿßŸÑ ⁄©€åÿß ⁄Ø€åÿß €Å€í€î
                </p>
                
                <div className="code-section">
                  <div className="code-header">
                    <h3>pages/Dashboard.jsx (Advanced)</h3>
                    <button
                      className="copy-btn"
                      onClick={() => copyToClipboard(advancedCodeBlocks.advancedDashboard, "Advanced Dashboard")}
                    >
                      {copiedCode === "Advanced Dashboard" ? "‚úÖ Copied!" : "üìã Copy Code"}
                    </button>
                  </div>
                  <pre className="english-code">
                    <code>{advancedCodeBlocks.advancedDashboard}</code>
                  </pre>
                </div>
              </div>
            </div>

            <div className="step-card">
              <div className="step-number">4</div>
              <div className="step-content">
                <h3 className="step-title">Advanced ProtectedRoute.jsx</h3>
                <p className="urdu-text">
                  €å€Å protected route advanced auth context ⁄©€í ÿ≥ÿßÿ™⁄æ ⁄©ÿßŸÖ ⁄©ÿ±€í ⁄Øÿß€î
                </p>
                
                <div className="code-section">
                  <div className="code-header">
                    <h3>ProtectedRoute.jsx (Advanced)</h3>
                    <button
                      className="copy-btn"
                      onClick={() => copyToClipboard(advancedCodeBlocks.advancedProtectedRoute, "Advanced Protected Route")}
                    >
                      {copiedCode === "Advanced Protected Route" ? "‚úÖ Copied!" : "üìã Copy Code"}
                    </button>
                  </div>
                  <pre className="english-code">
                    <code>{advancedCodeBlocks.advancedProtectedRoute}</code>
                  </pre>
                </div>
              </div>
            </div>

            <div className="step-card">
              <div className="step-number">5</div>
              <div className="step-content">
                <h3 className="step-title">Advanced Home.jsx</h3>
                <p className="urdu-text">
                  €å€Å public page advanced system ⁄©€í ÿ≥ÿßÿ™⁄æ €Å€í€î
                </p>
                
                <div className="code-section">
                  <div className="code-header">
                    <h3>pages/Home.jsx (Advanced)</h3>
                    <button
                      className="copy-btn"
                      onClick={() => copyToClipboard(advancedCodeBlocks.advancedHome, "Advanced Home")}
                    >
                      {copiedCode === "Advanced Home" ? "‚úÖ Copied!" : "üìã Copy Code"}
                    </button>
                  </div>
                  <pre className="english-code">
                    <code>{advancedCodeBlocks.advancedHome}</code>
                  </pre>
                </div>
              </div>
            </div>

            <div className="step-card">
              <div className="step-number">6</div>
              <div className="step-content">
                <h3 className="step-title">Advanced App.jsx</h3>
                <p className="urdu-text">
                  App.jsx ⁄©Ÿà advanced system ⁄©€í ŸÖÿ∑ÿßÿ®ŸÇ update ⁄©ÿ±€å⁄∫€î
                </p>
                
                <div className="code-section">
                  <div className="code-header">
                    <h3>App.jsx (Advanced)</h3>
                    <button
                      className="copy-btn"
                      onClick={() => copyToClipboard(advancedCodeBlocks.advancedApp, "Advanced App")}
                    >
                      {copiedCode === "Advanced App" ? "‚úÖ Copied!" : "üìã Copy Code"}
                    </button>
                  </div>
                  <pre className="english-code">
                    <code>{advancedCodeBlocks.advancedApp}</code>
                  </pre>
                </div>
              </div>
            </div>
          </section>
        </>
      )}

      {/* Combined Summary Section */}
      <section className="summary-card">
        <h2 className="section-title">üìå ÿÆŸÑÿßÿµ€Å</h2>
        <div className="summary-points">
          <div className="summary-item">
            <span className="summary-icon">üóÇ</span>
            <span>ÿµÿ≠€åÿ≠ folder structure ÿ®€Åÿ™ important €Å€í</span>
          </div>
          <div className="summary-item">
            <span className="summary-icon">‚öô</span>
            <span>Step-by-step implementation follow ⁄©ÿ±€å⁄∫</span>
          </div>
          <div className="summary-item">
            <span className="summary-icon">üîê</span>
            <span>AuthContext global state manage ⁄©ÿ±ÿ™ÿß €Å€í</span>
          </div>
          <div className="summary-item">
            <span className="summary-icon">üõ°</span>
            <span>ProtectedRoute private pages ⁄©Ÿà guard ⁄©ÿ±ÿ™ÿß €Å€í</span>
          </div>
          {activeSystem === "advanced" && (
            <>
              <div className="summary-item">
                <span className="summary-icon">üéâ</span>
                <span>SweetAlert2 professional alerts ÿØ€åÿ™ÿß €Å€í</span>
              </div>
              <div className="summary-item">
                <span className="summary-icon">üîÅ</span>
                <span>Auto Login user experience ÿ®€Åÿ™ÿ± ÿ®ŸÜÿßÿ™ÿß €Å€í</span>
              </div>
              <div className="summary-item">
                <span className="summary-icon">üåà</span>
                <span>Animate.css animations ÿ¥ÿßŸÖŸÑ ⁄©ÿ± ÿ≥⁄©ÿ™€í €Å€å⁄∫</span>
              </div>
            </>
          )}
        </div>

        <div className="summary-content">
          <h3>üåü Complete Implementation Flow:</h3>
          <p>1. Folder structure setup ⁄©ÿ±€å⁄∫</p>
          <p>2. AuthContext.jsx ÿ®ŸÜÿßÿ¶€å⁄∫ ({activeSystem === "advanced" ? "Advanced" : "Basic"} version)</p>
          <p>3. ProtectedRoute.jsx ÿ®ŸÜÿßÿ¶€å⁄∫</p>
          <p>4. ÿ™ŸÖÿßŸÖ pages components ÿ®ŸÜÿßÿ¶€å⁄∫</p>
          {activeSystem === "advanced" && <p>5. SweetAlert2 install ⁄©ÿ±€å⁄∫</p>}
          {activeSystem === "advanced" && <p>6. Animate.css install ⁄©ÿ±€å⁄∫ (optional)</p>}
          <p>{activeSystem === "advanced" ? "7" : "5"}. App.jsx ŸÖ€å⁄∫ routes connect ⁄©ÿ±€å⁄∫</p>
          <p>{activeSystem === "advanced" ? "8" : "6"}. Test ⁄©ÿ±€å⁄∫ ⁄©€Å ÿ≥ÿ® ⁄©⁄Ü⁄æ ⁄©ÿßŸÖ ⁄©ÿ± ÿ±€Åÿß €Å€í</p>
        </div>

        {activeSystem === "advanced" && (
          <div className="success-box" style={{ background: '#4c524cff', borderColor: '#4caf50', marginTop: '20px' }}>
            <h4>üß† Advanced Features Summary</h4>
            <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))", gap: "15px", marginTop: "15px" }}>
              <div>
                <strong>SweetAlert2</strong>
                <p>Stylish popups with animations and icons</p>
              </div>
              <div>
                <strong>Auto Login</strong>
                <p>User stays logged in using LocalStorage</p>
              </div>
              <div>
                <strong>Stay Logged In Checkbox</strong>
                <p>Controls whether data should persist</p>
              </div>
              <div>
                <strong>Animate.css</strong>
                <p>Professional animations for popups</p>
              </div>
              <div>
                <strong>Auto-Close Timer</strong>
                <p>Alerts automatically disappear after time</p>
              </div>
              <div>
                <strong>Custom Animations</strong>
                <p>Different animations for show/hide events</p>
              </div>
            </div>
          </div>
        )}
      </section>

      {copiedCode && (
        <div className="copy-notification">
          ‚úÖ {copiedCode} code copied to clipboard!
        </div>
      )}
    </div>
  );
}

export default Chapter25;